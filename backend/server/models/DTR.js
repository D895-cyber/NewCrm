const mongoose = require('mongoose');

const DTRSchema = new mongoose.Schema({
  caseId: {
    type: String,
    unique: true,
    required: false, // Auto-generated by pre-save hook
    trim: true
  },
  serialNumber: {
    type: String,
    required: true,
    trim: true
  },
  siteName: {
    type: String,
    required: true,
    trim: true
  },
  siteCode: {
    type: String,
    required: true,
    trim: true
  },
  region: {
    type: String,
    required: true,
    trim: true
  },
  complaintDescription: {
    type: String,
    required: true,
    trim: true
  },
  complaintDate: {
    type: Date,
    required: true,
    default: Date.now
  },
  // New fields from the image
  errorDate: {
    type: Date,
    required: true,
    default: Date.now
  },
  unitModel: {
    type: String,
    trim: true
  },
  problemName: {
    type: String,
    trim: true
  },
  actionTaken: {
    type: String,
    trim: true
  },
  remarks: {
    type: String,
    trim: true
  },
  callStatus: {
    type: String,
    enum: ['Open', 'In Progress', 'Resolved', 'Closed', 'Escalated'],
    default: 'Open'
  },
  caseSeverity: {
    type: String,
    enum: ['Low', 'Medium', 'High', 'Critical'],
    default: 'Medium'
  },
  openedBy: {
    name: {
      type: String,
      required: true,
      trim: true
    },
    designation: {
      type: String,
      trim: true
    },
    contact: {
      type: String,
      trim: true
    }
  },
  closedBy: {
    name: {
      type: String,
      trim: true
    },
    designation: {
      type: String,
      trim: true
    },
    contact: {
      type: String,
      trim: true
    },
    closedDate: {
      type: Date
    }
  },
  status: {
    type: String,
    enum: ['Open', 'In Progress', 'Closed', 'Shifted to RMA'],
    default: 'Open'
  },
  closedReason: {
    type: String,
    enum: ['Resolved', 'Shifted to RMA', 'No Action Required', 'Other'],
    trim: true
  },
  rmaCaseNumber: {
    type: String,
    trim: true,
    ref: 'RMA'
  },
  priority: {
    type: String,
    enum: ['Low', 'Medium', 'High', 'Critical'],
    default: 'Medium'
  },
  assignedTo: {
    type: String,
    trim: true
  },
  estimatedResolutionTime: {
    type: String,
    trim: true
  },
  actualResolutionTime: {
    type: String,
    trim: true
  },
  notes: {
    type: String,
    trim: true
  },
  attachments: {
    type: [String],
    default: [] // URLs to uploaded files
  },
  // Projector details (populated from serial number lookup)
  projectorDetails: {
    model: String,
    brand: String,
    installDate: Date,
    warrantyEnd: Date,
    lastService: Date
  },
  
  // Enhanced RMA Integration
  rmaStatus: {
    type: String,
    enum: ['Not Created', 'Created', 'In Progress', 'Completed'],
    default: 'Not Created'
  },
  
  // Better categorization
  problemCategory: {
    type: String,
    enum: ['Hardware', 'Software', 'Network', 'Power', 'Other'],
    default: 'Other'
  },
  
  // SLA tracking
  slaTarget: {
    type: Number, // hours
    default: 24
  },
  slaBreached: {
    type: Boolean,
    default: false
  },
  
  // Escalation tracking
  escalationLevel: {
    type: Number,
    default: 0,
    min: 0,
    max: 3
  },
  escalatedTo: {
    name: String,
    designation: String,
    contact: String
  },
  
  // Performance metrics
  resolutionTime: {
    type: Number, // hours
    min: 0
  },
  customerSatisfaction: {
    type: Number,
    min: 1,
    max: 5
  }
}, {
  timestamps: true
});

// Indexes for better performance
DTRSchema.index({ caseId: 1 });
DTRSchema.index({ serialNumber: 1 });
DTRSchema.index({ siteName: 1 });
DTRSchema.index({ status: 1 });
DTRSchema.index({ complaintDate: -1 });
DTRSchema.index({ priority: 1 });
DTRSchema.index({ callStatus: 1 });
DTRSchema.index({ caseSeverity: 1 });
DTRSchema.index({ rmaStatus: 1 });
DTRSchema.index({ problemCategory: 1 });
DTRSchema.index({ escalationLevel: 1 });
DTRSchema.index({ 'escalatedTo.name': 1 });
DTRSchema.index({ slaBreached: 1 });

// Auto-generate case ID in format: DTR-YYYY-MM-DD-XXX
DTRSchema.pre('save', async function(next) {
  if (!this.caseId) {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    
    // Count DTRs for today
    const count = await mongoose.model('DTR').countDocuments({
      caseId: new RegExp(`^DTR-${year}-${month}-${day}-`)
    });
    
    this.caseId = `DTR-${year}-${month}-${day}-${String(count + 1).padStart(3, '0')}`;
  }
  next();
});

// Pre-save hook to populate projector details when serial number is provided
DTRSchema.pre('save', async function(next) {
  if (this.isNew || this.isModified('serialNumber')) {
    try {
      const Projector = mongoose.model('Projector');
      const projector = await Projector.findOne({ serialNumber: this.serialNumber });
      
      if (projector) {
        this.projectorDetails = {
          model: projector.model,
          brand: projector.brand,
          installDate: projector.installDate,
          warrantyEnd: projector.warrantyEnd,
          lastService: projector.lastService
        };
        
        // Also populate site details if not already set
        if (!this.siteName || !this.siteCode) {
          const Site = mongoose.model('Site');
          const site = await Site.findById(projector.siteId);
          if (site) {
            this.siteName = site.name;
            this.siteCode = site.name; // Using site name as code for now
            this.region = site.address.state; // Using state as region
          }
        }
        
        // Set unit model from projector
        if (!this.unitModel) {
          this.unitModel = projector.model;
        }
      }
      next();
    } catch (error) {
      next(error);
    }
  } else {
    next();
  }
});

// Post-save hook to create RMA when status is "Shifted to RMA"
DTRSchema.post('save', async function(doc) {
  if (doc.status === 'Shifted to RMA' && doc.closedReason === 'Shifted to RMA' && !doc.rmaCaseNumber) {
    try {
      const RMA = mongoose.model('RMA');
      const rma = new RMA({
        // Let the pre-save hook generate the RMA number
        projectorSerial: doc.serialNumber,
        brand: doc.projectorDetails?.brand || 'Unknown',
        projectorModel: doc.projectorDetails?.model || 'Unknown',
        customerSite: doc.siteName,
        faultyPart: {
          partNumber: 'DTR-' + doc.caseId,
          partName: 'Daily Trouble Report',
          serialNumber: doc.serialNumber,
          logicalCondition: 'Faulty',
          physicalCondition: 'Good',
          failureDescription: doc.complaintDescription
        },
        issueDate: new Date(),
        status: 'Under Review',
        priority: doc.priority === 'Critical' ? 'High' : doc.priority,
        reason: doc.complaintDescription, // Required field
        warrantyStatus: doc.projectorDetails?.warrantyEnd && doc.projectorDetails.warrantyEnd > new Date() ? 'In Warranty' : 'Out of Warranty',
        technician: doc.assignedTo || 'Unassigned',
        assignedTo: doc.assignedTo || 'Unassigned',
        estimatedCost: 0, // Set default cost
        expectedResolution: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
        notes: `Auto-generated from DTR: ${doc.caseId}. Complaint: ${doc.complaintDescription}`
      });
      
      const savedRMA = await rma.save();
      
      // Update DTR with RMA case number
      await mongoose.model('DTR').findByIdAndUpdate(doc._id, {
        rmaCaseNumber: savedRMA.rmaNumber
      });
    } catch (error) {
      console.error('Error creating RMA from DTR:', error);
    }
  }
});

module.exports = mongoose.model('DTR', DTRSchema);
